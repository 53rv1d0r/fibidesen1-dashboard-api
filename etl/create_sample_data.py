#!/usr/bin/env python3
"""
Script para crear datos de ejemplo m√©dicos realistas para el dashboard
Ejecutar DESPU√âS de crear las tablas con init_db.py
"""

import logging
import pandas as pd
from datetime import datetime, timedelta
import random
import uuid
from connectors.postgres_connector import PostgresConnector
from config.settings import settings

# Configurar logging
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SampleDataGenerator:
    def __init__(self):
        self.postgres = PostgresConnector()
        
        # Datos base para generar ejemplos realistas
        self.aseguradoras = [
            "SURA EPS", "Nueva EPS", "Sanitas EPS", "Salud Total",
            "EPS Famisanar", "Comfenalco", "Coomeva EPS", 
            "Medim√°s EPS", "Capital Salud EPS", "Particular/Prepagada"
        ]
        
        self.diagnosticos = [
            "Quemadura t√©rmica grado II en brazo",
            "Quemadura el√©ctrica m√∫ltiple",
            "Quemadura qu√≠mica en cara y cuello", 
            "Quemadura por llama en t√≥rax",
            "Quemadura por contacto en mano",
            "Quemadura por l√≠quido caliente en pierna",
            "Quemadura solar severa",
            "Quemadura por explosi√≥n multiple",
            "Quemadura por fricci√≥n",
            "S√≠ndrome de inhalaci√≥n de humo"
        ]
        
        self.condiciones_egreso = [
            "Mejorado", "Mejorado", "Mejorado", "Mejorado", "Mejorado",  # 50% mejorados
            "Alta m√©dica", "Alta m√©dica", "Alta m√©dica",  # 30% alta m√©dica
            "Traslado", "Fallecido"  # 10% traslado, 10% fallecido
        ]
        
        self.salas = [
            "UCI Quemados", "Hospitalizaci√≥n General", 
            "Cirug√≠a Pl√°stica", "Cuidados Intermedios"
        ]
        
        self.nombres = [
            "Mar√≠a Garc√≠a L√≥pez", "Juan Carlos Rodr√≠guez", "Ana Sof√≠a Mart√≠nez",
            "Carlos Alberto S√°nchez", "Luz Elena Vargas", "Pedro Antonio G√≥mez",
            "Carmen Rosa Jim√©nez", "Miguel √Ångel Torres", "Sandra Patricia L√≥pez",
            "Jos√© Luis Hern√°ndez", "Gloria In√©s Morales", "Roberto Carlos D√≠az",
            "Patricia Elena Ruiz", "Fernando Jos√© Castro", "Claudia Marcela Silva"
        ]
    
    def generate_desenlaces_data(self, num_records=150):
        """Genera datos de desenlaces m√©dicos realistas"""
        logger.info(f"Generando {num_records} registros de desenlaces...")
        
        data = []
        base_date = datetime.now() - timedelta(days=90)
        
        for i in range(num_records):
            # Fechas realistas
            fecha_ingreso = base_date + timedelta(days=random.randint(0, 90))
            dias_estancia = random.randint(1, 45)
            fecha_egreso = fecha_ingreso + timedelta(days=dias_estancia) if random.random() > 0.1 else None
            
            # Datos del paciente
            sexo = random.choice(['Masculino', 'Femenino'])
            edad = random.randint(5, 85)
            
            # Severity correlation - casos m√°s severos tienen m√°s d√≠as
            if dias_estancia > 30:
                condicion = random.choice(['Fallecido', 'Traslado', 'Mejorado'])
            elif dias_estancia > 15:
                condicion = random.choice(['Mejorado', 'Alta m√©dica', 'Traslado'])
            else:
                condicion = random.choice(['Mejorado', 'Alta m√©dica'])
            
            record = {
                'desenlaceq_id': i + 1,
                'numero_episodio': i + 1000,
                'fecha_ingreso': fecha_ingreso.date(),
                'fecha_egreso': fecha_egreso.date() if fecha_egreso else None,
                'dias_estancia': dias_estancia,
                'diagnostico': random.choice(self.diagnosticos),
                'sala_egreso': random.choice(self.salas),
                'causa': random.choice(['Accidente dom√©stico', 'Accidente laboral', 'Accidente vehicular', 'Agresi√≥n', 'Intento suicidio', 'Otros']),
                'nombre_paciente': random.choice(self.nombres),
                'sexo': sexo,
                'edad': edad,
                'medico_tratante': random.choice(['Dr. Garc√≠a', 'Dra. Mart√≠nez', 'Dr. L√≥pez', 'Dra. Rodr√≠guez', 'Dr. S√°nchez']),
                'numero_historia_clinica': f"HC{random.randint(100000, 999999)}",
                'nombre_aseguradora': random.choice(self.aseguradoras),
                'condicion_egreso_nombre': condicion,
                'fecha_procesamiento': datetime.now()
            }
            data.append(record)
        
        return pd.DataFrame(data)
    
    def generate_stats_aseguradora(self, desenlaces_df):
        """Genera estad√≠sticas por aseguradora"""
        logger.info("Generando estad√≠sticas por aseguradora...")
        
        stats = desenlaces_df.groupby('nombre_aseguradora').agg({
            'desenlaceq_id': 'count',
            'dias_estancia': 'mean'
        }).reset_index()
        
        stats.columns = ['nombre_aseguradora', 'total_casos', 'promedio_estancia']
        
        # Calcular casos mejorados y fallecidos
        mejoras = desenlaces_df[desenlaces_df['condicion_egreso_nombre'].isin(['Mejorado', 'Alta m√©dica'])].groupby('nombre_aseguradora').size().to_dict()
        fallecidos = desenlaces_df[desenlaces_df['condicion_egreso_nombre'] == 'Fallecido'].groupby('nombre_aseguradora').size().to_dict()
        
        stats['casos_mejorados'] = stats['nombre_aseguradora'].map(mejoras).fillna(0).astype(int)
        stats['casos_fallecidos'] = stats['nombre_aseguradora'].map(fallecidos).fillna(0).astype(int)
        stats['promedio_estancia'] = stats['promedio_estancia'].round(1)
        stats['fecha_procesamiento'] = datetime.now()
        
        return stats
    
    def generate_stats_mensual(self, desenlaces_df):
        """Genera estad√≠sticas mensuales"""
        logger.info("Generando estad√≠sticas mensuales...")
        
        desenlaces_df['a√±o'] = desenlaces_df['fecha_ingreso'].dt.year
        desenlaces_df['mes'] = desenlaces_df['fecha_ingreso'].dt.month
        
        stats = desenlaces_df.groupby(['a√±o', 'mes']).agg({
            'desenlaceq_id': 'count',
            'dias_estancia': 'mean'
        }).reset_index()
        
        stats.columns = ['a√±o', 'mes', 'total_ingresos', 'promedio_estancia']
        
        # Calcular casos mejorados y fallecidos por mes
        mejoras_mes = desenlaces_df[desenlaces_df['condicion_egreso_nombre'].isin(['Mejorado', 'Alta m√©dica'])].groupby(['a√±o', 'mes']).size().to_dict()
        fallecidos_mes = desenlaces_df[desenlaces_df['condicion_egreso_nombre'] == 'Fallecido'].groupby(['a√±o', 'mes']).size().to_dict()
        
        stats['casos_mejorados'] = stats.apply(lambda x: mejoras_mes.get((x['a√±o'], x['mes']), 0), axis=1)
        stats['casos_fallecidos'] = stats.apply(lambda x: fallecidos_mes.get((x['a√±o'], x['mes']), 0), axis=1)
        stats['promedio_estancia'] = stats['promedio_estancia'].round(1)
        stats['fecha_procesamiento'] = datetime.now()
        
        return stats
    
    def generate_stats_demografia(self, desenlaces_df):
        """Genera estad√≠sticas demogr√°ficas"""
        logger.info("Generando estad√≠sticas demogr√°ficas...")
        
        # Categorizar edades
        def categorizar_edad(edad):
            if edad < 18:
                return 'Menor de 18'
            elif 18 <= edad <= 30:
                return '18-30'
            elif 31 <= edad <= 50:
                return '31-50'
            elif 51 <= edad <= 70:
                return '51-70'
            else:
                return 'Mayor de 70'
        
        desenlaces_df['rango_edad'] = desenlaces_df['edad'].apply(categorizar_edad)
        
        stats = desenlaces_df.groupby(['sexo', 'rango_edad']).agg({
            'desenlaceq_id': 'count',
            'dias_estancia': 'mean'
        }).reset_index()
        
        stats.columns = ['sexo', 'rango_edad', 'total_casos', 'promedio_estancia']
        stats['promedio_estancia'] = stats['promedio_estancia'].round(1)
        stats['fecha_procesamiento'] = datetime.now()
        
        return stats
    
    def load_sample_data(self):
        """Carga todos los datos de ejemplo"""
        try:
            logger.info("Iniciando carga de datos de ejemplo...")
            
            # 1. Generar datos de desenlaces
            desenlaces_df = self.generate_desenlaces_data(150)
            
            # 2. Generar estad√≠sticas
            stats_aseg = self.generate_stats_aseguradora(desenlaces_df)
            stats_mensual = self.generate_stats_mensual(desenlaces_df)
            stats_demo = self.generate_stats_demografia(desenlaces_df)
            
            # 3. Cargar en base de datos
            logger.info("Cargando datos en PostgreSQL...")
            
            success1 = self.postgres.load_data(desenlaces_df, 'dashboard_desenlaces')
            success2 = self.postgres.load_data(stats_aseg, 'dashboard_stats_aseguradora')  
            success3 = self.postgres.load_data(stats_mensual, 'dashboard_stats_mensual')
            success4 = self.postgres.load_data(stats_demo, 'dashboard_stats_demografia')
            
            if all([success1, success2, success3, success4]):
                logger.info("‚úÖ Datos de ejemplo cargados exitosamente!")
                logger.info(f"üìä Estad√≠sticas:")
                logger.info(f"   - {len(desenlaces_df)} desenlaces")
                logger.info(f"   - {len(stats_aseg)} aseguradoras")
                logger.info(f"   - {len(stats_mensual)} meses")
                logger.info(f"   - {len(stats_demo)} grupos demogr√°ficos")
                return True
            else:
                logger.error("‚ùå Error cargando algunos datos")
                return False
                
        except Exception as e:
            logger.error(f"Error generando datos de ejemplo: {e}")
            return False
        finally:
            self.postgres.close()

def main():
    """Funci√≥n principal"""
    logger.info("=== Generador de Datos de Ejemplo - Dashboard M√©dico ===")
    
    generator = SampleDataGenerator()
    success = generator.load_sample_data()
    
    if success:
        logger.info("üéâ ¬°Datos de ejemplo listos! Tu dashboard ya tiene informaci√≥n para mostrar.")
        logger.info("üí° Ahora puedes desplegar el API y probar el frontend.")
    else:
        logger.error("‚ùå Error generando datos de ejemplo.")
        return False
    
    return success

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
